generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  role         Role          @relation(fields: [roleId], references: [id])
  roleId       Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reservations Reservation[]
  AuditLog     AuditLog[]

  @@map("users")
}

enum RoleType {
  VIEWER_USER
  RESERVATION_OPERATOR_USER
  ADMIN_USER
}

model Role {
  id          Int          @id @default(autoincrement())
  name        RoleType     @unique @default(VIEWER_USER)
  description String?
  permissions Permission[]
  users       User[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("roles")
}

enum PermissionType {
  CAN_VIEW_RESERVATIONS
  CAN_MANAGE_RESERVATIONS
  CAN_MANAGE_SPACES
  CAN_MANAGE_ITEMS
  CAN_MANAGE_SPACE_ITEMS
}

enum ScopeType {
  GLOBAL
  RESERVATION_MANAGEMENT
  SPACE_MANAGEMENT
}

model Permission {
  id         Int            @id @default(autoincrement())
  roleId     Int
  permission PermissionType
  scope      ScopeType
  role       Role           @relation(fields: [roleId], references: [id])
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@map("permissions")
}

enum SpaceAvailability {
  AVAILABLE
  UNAVAILABLE
  MAINTENANCE
  INACTIVE
}

model Space {
  id           Int               @id @default(autoincrement())
  name         String
  description  String?
  location     String?
  capacity     Int?
  available    SpaceAvailability @default(AVAILABLE)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  reservations Reservation[]
  SpaceItem    SpaceItem[]

  @@map("spaces")
}

enum ReservationStatus {
  APPROVED
  PENDING
  REJECTED
  CANCELLED
}

model Reservation {
  id        String            @id @default(uuid())
  userId    String
  spaceId   Int
  startTime DateTime
  endTime   DateTime
  status    ReservationStatus @default(PENDING)
  user      User              @relation(fields: [userId], references: [id])
  space     Space             @relation(fields: [spaceId], references: [id])
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@map("reservations")
}

enum AuditAction {
  RESERVATION_CREATE
  RESERVATION_UPDATE
  RESERVATION_DELETE
  SPACE_CREATE
  SPACE_UPDATE
  SPACE_DELETE
  ITEM_CREATE
  ITEM_UPDATE
  ITEM_DELETE
  SPACE_ITEM_CREATE
  SPACE_ITEM_UPDATE
  SPACE_ITEM_DELETE
}

model AuditLog {
  id        String      @id @default(uuid())
  userId    String
  action    AuditAction
  timestamp DateTime    @default(now())
  details   String?
  user      User        @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Item {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  spaceItems  SpaceItem[]

  @@map("items")
}

model SpaceItem {
  id        Int      @id @default(autoincrement())
  spaceId   Int
  itemId    Int
  quantity  Int      @default(1)
  space     Space    @relation(fields: [spaceId], references: [id])
  item      Item     @relation(fields: [itemId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("space_items")
}
