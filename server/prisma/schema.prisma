generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  password  String
  role      Role       @relation(fields: [roleId], references: [id])
  roleId    Int
  bookings  Booking[]
  AuditLog  AuditLog[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("users")
}

// Role Model
model Role {
  id          Int          @id @default(autoincrement())
  name        RoleName
  users       User[]
  permissions Permission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("roles")
}

// Permission Model
model Permission {
  id        Int            @id @default(autoincrement())
  name      PermissionName
  roles     Role[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("permissions")
}

// Room Model
model Room {
  id          Int        @id @default(autoincrement())
  name        String
  capacity    Int
  description String?
  bookings    Booking[]
  resources   Resource[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("rooms")
}

// Resource Model
model Resource {
  id          Int      @id @default(autoincrement())
  name        String
  quantity    Int
  description String?
  room        Room     @relation(fields: [roomId], references: [id])
  roomId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("resources")
}

// Booking Model
model Booking {
  id          String        @id @default(cuid())
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  room        Room          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId      Int
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  status      BookingStatus @default(PENDING)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("bookings")
}

// AuditLog Model
model AuditLog {
  id        Int         @id @default(autoincrement())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  action    AuditAction
  entity    AuditEntity
  entityId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?

  @@map("audit_logs")
}

// AuditAction Enum
enum AuditAction {
  CREATE
  UPDATE
  DELETE

  @@map("audit_actions")
}

// AuditEntity Enum
enum AuditEntity {
  USER
  ROOM
  RESOURCE
  BOOKING
  ROLE

  @@map("audit_entities")
}

// BookingStatus Enum
enum BookingStatus {
  PENDING
  CONFIRMED
  ACTIVE
  COMPLETED
  CANCELLED

  @@map("booking_statuses")
}

// Role Enum
enum RoleName {
  ADMIN
  SUPERVISOR
  EMPLOYEE
  GUEST

  @@map("role_names")
}

// PermissionName Enum
enum PermissionName {
  CREATE_USER
  READ_USER
  UPDATE_USER
  DELETE_USER

  CREATE_ROLE
  READ_ROLE
  UPDATE_ROLE
  DELETE_ROLE
  ASSIGN_ROLE

  CREATE_ROOM
  READ_ROOM
  UPDATE_ROOM
  DELETE_ROOM

  CREATE_RESOURCE
  READ_RESOURCE
  UPDATE_RESOURCE
  DELETE_RESOURCE

  CREATE_BOOKING
  READ_BOOKING
  UPDATE_BOOKING
  CANCEL_BOOKING
  CONFIRM_BOOKING
  COMPLETE_BOOKING

  VIEW_AUDIT_LOGS

  MANAGE_PERMISSIONS
  ACCESS_SYSTEM_SETTINGS

  @@map("permission_names")
}
